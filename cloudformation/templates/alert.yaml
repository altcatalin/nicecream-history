---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Operations: Alert topic'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Alert Parameters'
      Parameters:
      - Email
      - HttpEndpoint
      - HttpsEndpoint
      - LogsRetentionInDays
      - SlackWebhookUrl
      - SlackChannelMap
    - Label:
        default: 'Fallback Parameters'
      Parameters:
      - FallbackEmail
Parameters:
  Email:
    Description: 'Optional email address that will receive alerts.'
    Type: String
    Default: ''
  HttpEndpoint:
    Description: 'Optional HTTP endpoint that will receive alerts via POST requests.'
    Type: String
    Default: ''
  HttpsEndpoint:
    Description: 'Optional HTTPS endpoint that will receive alerts via POST requests (can be a marbot.io endpoint).'
    Type: String
    Default: ''
  FallbackEmail:
    Description: 'Email address that will receive alerts if alerts can not be delivered.'
    Type: String
    Default: ''
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  SlackWebhookUrl:
    Description: 'Slack WebHook URL'
    Type: String
    Default: ''
  SlackChannelMap:
    Description: 'Slack Channel Map (JSON)'
    Type: String
    Default: ''
Conditions:
  HasEmail: !Not [!Equals [!Ref Email, '']]
  HasFallbackEmail: !Not [!Equals [!Ref FallbackEmail, '']]
  HasHttpEndpoint: !Not [!Equals [!Ref HttpEndpoint, '']]
  HasHttpsEndpoint: !Not [!Equals [!Ref HttpsEndpoint, '']]
  HasSlackWebhookUrl: !Not [!Equals [!Ref SlackWebhookUrl, '']]
Resources:
  Topic:
    Type: 'AWS::SNS::Topic'
    Properties: {}
  TopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: Id1
        Version: '2012-10-17'
        Statement:
        - Sid: Sid1
          Effect: Allow
          Principal:
            Service:
            - 'events.amazonaws.com' # Allow CloudWatch Events
            - 'budgets.amazonaws.com' # Allow Budget Notifications
            - 'rds.amazonaws.com' # Allow RDS Events
            - 's3.amazonaws.com' # Allow S3 Event Notifications
          Action: 'sns:Publish'
          Resource: !Ref Topic
        - Sid: Sid2
          Effect: Allow
          Principal:
            AWS: '*' # Allow CloudWatch Alarms, ElastiCache Notifications, Elastic Beanstalk Notifications, Auto Scaling Notification
          Action: 'sns:Publish'
          Resource: !Ref Topic
          Condition:
            StringEquals:
              'AWS:SourceOwner': !Ref 'AWS::AccountId'
        - Sid: Sid3
          Effect: Allow
          Principal:
            Service: 'ses.amazonaws.com' # Allow SES Notifications & Events
          Action: 'sns:Publish'
          Resource: !Ref Topic
          Condition:
            StringEquals:
              'AWS:Referer': !Ref 'AWS::AccountId'
      Topics:
      - !Ref Topic
  FallbackTopic:
    Type: 'AWS::SNS::Topic'
    Properties: {}
  NumberOfNotificationsFailedTooHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Alerts could not be delivered'
      Namespace: 'AWS/SNS'
      MetricName: NumberOfNotificationsFailed
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Ref FallbackTopic
      Dimensions:
      - Name: TopicName
        Value: !GetAtt Topic.TopicName
  SlackLambdaPermission:
    Condition: HasSlackWebhookUrl
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref SlackLambda
      Principal: 'sns.amazonaws.com'
      SourceArn: !Ref Topic
  SlackLambdaRole:
    Condition: HasSlackWebhookUrl
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action: 'sts:AssumeRole'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  SlackLambda:
    Condition: HasSlackWebhookUrl
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Sub |
          #!/usr/bin/env python
          # Use slack_alert_lambda.sh to upload code

      Handler: 'slack_alert_lambda.lambda_handler'
      MemorySize: 128
      Role: !GetAtt 'SlackLambdaRole.Arn'
      Runtime: 'python3.6'
      Timeout: 3
      Environment:
        Variables:
          WEBHOOK_URL: !Ref SlackWebhookUrl
          CHANNEL_MAP: !Ref SlackChannelMap
  SlackLambdaLogGroup:
    Condition: HasSlackWebhookUrl
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SlackLambda}'
      RetentionInDays: !Ref LogsRetentionInDays
  EmailSubscription:
    Condition: HasEmail
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !Ref Email
      Protocol: email
      TopicArn: !Ref Topic
  HttpEndpointSubscription:
    Condition: HasHttpEndpoint
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !Ref HttpEndpoint
      Protocol: http
      TopicArn: !Ref Topic
  HttpsEndpointSubscription:
    Condition: HasHttpsEndpoint
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !Ref HttpsEndpoint
      Protocol: https
      TopicArn: !Ref Topic
  SlackLambdaSubscription:
    Condition: HasSlackWebhookUrl
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt 'SlackLambda.Arn'
      Protocol: lambda
      TopicArn: !Ref Topic
  FallbackEmailSubscription:
    Condition: HasFallbackEmail
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !Ref FallbackEmail
      Protocol: email
      TopicArn: !Ref FallbackTopic
Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  SlackLambdaName:
    Condition: HasSlackWebhookUrl
    Description: 'Slack Lambda Name'
    Value: !Ref SlackLambda
    Export:
      Name: !Sub '${AWS::StackName}-SlackLambdaName'
  TopicARN:
    Description: 'The ARN of the alert topic.'
    Value: !Ref Topic
    Export:
      Name: !Sub '${AWS::StackName}-TopicARN'