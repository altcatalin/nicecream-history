---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'State: S3 bucket, a cloudonaut.io template, sponsored by https://github.com/ngault'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentS3VirusScanStack
    - Label:
        default: 'S3 Parameters'
      Parameters:
      - BucketName
      - Access
      - Versioning
      - NoncurrentVersionExpirationInDays
      - ExpirationInDays
      - Encryption
      - ReadOnlyIAMPolicy
    - Label:
        default: 'Tags'
      Parameters:
      - EnvironmentName
Parameters:
  EnvironmentName:
    Description: Environment name
    Type: String
  ParentS3VirusScanStack:
    Description: 'Optional stack name of parent S3 VirusScan stack based on https://github.com/widdix/aws-s3-virusscan template.'
    Type: String
    Default: ''
  BucketName:
    Description: 'Optional name of the bucket.'
    Type: String
    Default: ''
  Access:
    Description: 'Access policy of the bucket.'
    Type: String
    Default: Private
    AllowedValues: [Private, PublicRead, CloudFrontRead, ElbAccessLogWrite]
  Versioning:
    Description: 'Enable versioning to keep a backup if objects change.'
    Type: String
    Default: false
    AllowedValues: [true, false, 'false-but-was-true']
  NoncurrentVersionExpirationInDays:
    Description: 'Remove noncurrent object versions after days (set to 0 to disable).'
    Type: Number
    Default: 0
    MinValue: 0
  ExpirationInDays:
    Description: 'Remove objects after days (set to 0 to disable).'
    Type: Number
    Default: 0
    MinValue: 0
  Encryption:
    Description: 'Enable server side encryption using KMS (customer managed) CMK.'
    Type: String
    Default: false
    AllowedValues: [true, false]
  ReadOnlyIAMPolicy:
    Description: 'ReadOnly IAM Policy'
    Type: String
    Default: true
    AllowedValues: [true, false]
Conditions:
  HasS3VirusScan: !Not [!Equals [!Ref ParentS3VirusScanStack, '']]
  HasPublicReadAccess: !Equals [!Ref Access, PublicRead]
  HasCloudFrontReadAccess: !Equals [!Ref Access, CloudFrontRead]
  HasElbAccessLogWriteAccess: !Equals [!Ref Access, ElbAccessLogWrite]
  HasBucketName: !Not [!Equals [!Ref BucketName, '']]
  HasVersioning: !Equals [!Ref Versioning, true]
  HadVersioning: !Equals [!Ref Versioning, 'false-but-was-true']
  HasNoncurrentVersionExpirationInDays: !Not [!Equals [!Ref NoncurrentVersionExpirationInDays, 0]]
  HasExpirationInDays: !Not [!Equals [!Ref ExpirationInDays, 0]]
  HasEncryption: !Equals [!Ref Encryption, true]
  NeedsBucketPolicy: !Or [!Condition HasPublicReadAccess, !Condition HasCloudFrontReadAccess, !Condition HasEncryption, !Condition HasElbAccessLogWriteAccess]
  HasReadOnlyIAMPolicy: !Equals [!Ref ReadOnlyIAMPolicy, true]
Resources:
  Key:
    Condition: HasEncryption
    Type: 'AWS::KMS::Key'
    Properties:
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action: 'kms:*'
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: '*'
          Action:
          - 'kms:Encrypt'
          - 'kms:Decrypt'
          - 'kms:ReEncrypt*'
          - 'kms:GenerateDataKey*'
          - 'kms:DescribeKey'
          Resource: '*'
          Condition:
            StringEquals:
              'kms:CallerAccount': !Ref 'AWS::AccountId'
              'kms:ViaService': !Sub 's3.${AWS::Region}.amazonaws.com'
        - !If
          - HasPublicReadAccess
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
            - 'kms:Decrypt'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService': !Sub 's3.${AWS::Region}.amazonaws.com'
          - !Ref 'AWS::NoValue'
  KeyAlias:
    Condition: HasEncryption
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${AWS::StackName}'
      TargetKeyId: !Ref Key
  Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !If [HasBucketName, !Ref BucketName, !Ref 'AWS::NoValue']
      PublicAccessBlockConfiguration:
        !If
          - HasPublicReadAccess
          - !Ref 'AWS::NoValue'
          - BlockPublicAcls: True
            BlockPublicPolicy: True
            IgnorePublicAcls: True
            RestrictPublicBuckets: True
      LifecycleConfiguration:
        Rules:
        - AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 7
          Status: Enabled
        - NoncurrentVersionExpirationInDays: !If [HasNoncurrentVersionExpirationInDays, !Ref NoncurrentVersionExpirationInDays, 1]
          Status: !If [HasNoncurrentVersionExpirationInDays, Enabled, Disabled]
        - ExpirationInDays: !If [HasExpirationInDays, !Ref ExpirationInDays, 1]
          Status: !If [HasExpirationInDays, Enabled, Disabled]
      NotificationConfiguration: !If
      - HasS3VirusScan
      - QueueConfigurations:
        - Event: 's3:ObjectCreated:*'
          Queue: {'Fn::ImportValue': !Sub '${ParentS3VirusScanStack}-ScanQueueArn'}
      - !Ref 'AWS::NoValue'
      VersioningConfiguration: !If [HasVersioning, {Status: Enabled}, !If [HadVersioning, {Status: Suspended}, !Ref 'AWS::NoValue']]
      BucketEncryption: !If [HasEncryption, {ServerSideEncryptionConfiguration: [{ServerSideEncryptionByDefault: {KMSMasterKeyID: !Ref Key, SSEAlgorithm: 'aws:kms'}}]}, !Ref 'AWS::NoValue']
      CorsConfiguration:
        CorsRules:
        -
          AllowedHeaders:
            - '*'
          AllowedMethods:
            - HEAD
            - GET
          AllowedOrigins:
            - '*'
          MaxAge: 3600
      Tags:
      - Key: Name
        Value: !Sub '${EnvironmentName}'
  BucketPolicy:
    Condition: NeedsBucketPolicy
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
        - !If
          - HasPublicReadAccess
          - Principal: '*'
            Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub '${Bucket.Arn}/*'
          - !Ref 'AWS::NoValue'
        - !If
          - HasCloudFrontReadAccess
          - Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub '${Bucket.Arn}/*'
          - !Ref 'AWS::NoValue'
        - !If
          - HasElbAccessLogWriteAccess
          - Principal:
              AWS: # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
              - '127311923021' # us-east-1
              - '033677994240' # us-east-2
              - '027434742980' # us-west-1
              - '797873946194' # us-west-2
              - '985666609251' # ca-central-1
              - '054676820928' # eu-central-1
              - '156460612806' # eu-west-1
              - '652711504416' # eu-west-2
              - '009996457667' # eu-west-3
              - '582318560864' # ap-northeast-1
              - '600734575887' # ap-northeast-2
              - '383597477331' # ap-northeast-3
              - '114774131450' # ap-southeast-1
              - '783225319266' # ap-southeast-2
              - '718504428378' # ap-south-1
              - '507241528517' # sa-east-1
            Action: 's3:PutObject'
            Effect: Allow
            Resource: !Sub '${Bucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
          - !Ref 'AWS::NoValue'
        - !If
          - HasEncryption
          - Principal: '*'
            Action: 's3:PutObject*'
            Effect: Deny
            Resource: !Sub '${Bucket.Arn}/*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': ''
                's3:x-amz-server-side-encryption-aws-kms-key-id': !GetAtt 'Key.Arn'
          - !Ref 'AWS::NoValue'
  CloudFrontOriginAccessIdentity:
    Condition: HasCloudFrontReadAccess
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref Bucket
  ECSTaskPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 's3:Get*'
          - 's3:List*'
          Resource: !Sub '${Bucket.Arn}/*'
        - !If
          - HasReadOnlyIAMPolicy
          - !Ref 'AWS::NoValue'
          - Effect: Allow
            Action:
            - 's3:PutObject*'
            - 's3:DeleteObject*'
            Resource: !Sub '${Bucket.Arn}/*'
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'state/s3'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  BucketName:
    Description: 'Name of the bucket'
    Value: !Ref Bucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'
  BucketDomainName:
    Description: 'Domain name of the bucket.'
    Value: !GetAtt 'Bucket.DomainName'
    Export:
      Name: !Sub '${AWS::StackName}-BucketDomainName'
  CloudFrontOriginAccessIdentity:
    Condition: HasCloudFrontReadAccess
    Description: 'Origin access identity for secure CloudFront access.'
    Value: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontOriginAccessIdentity'
  ECSTaskPolicy:
    Description: 'ECS Task Policy'
    Value: !Ref ECSTaskPolicy
    Export:
      Name: !Sub '${AWS::StackName}-ECSTaskPolicy'