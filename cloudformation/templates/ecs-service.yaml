---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: "ECS: service that runs on an ECS cluster and uses the cluster's ALB based on ecs/cluster.yaml, a cloudonaut.io template"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
      - ParentClusterStack
      - ParentAlertStack
      - ParentZoneStack
#      - ParentTaskRoleStack
    - Label:
        default: 'Load Balancer Parameters'
      Parameters:
      - LoadBalancerType
      - LoadBalancerHttpPriority
      - LoadBalancerHttpsPriority
      - LoadBalancerHostPattern
      - LoadBalancerPath
      - LoadBalancerHttps
      - LoadBalancerDeregistrationDelay
      - HealthCheckPath
    - Label:
        default: 'Service Parameters'
      Parameters:
      - SubDomainNameWithDot
    - Label:
        default: 'Task Parameters'
      Parameters:
      - Image
      - DesiredCount
      - MaxCapacity
      - MinCapacity
      - ContainerPort
      - SSMParametersPrefix
      - ContainerMaxCPU
      - ContainerMaxMemory
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentClusterStack:
    Description: 'Stack name of parent Cluster stack based on ecs/cluster.yaml template.'
    Type: String
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
    Default: ''
  ParentZoneStack:
    Description: 'Optional stack name of parent zone stack based on vpc/zone-*.yaml template.'
    Type: String
    Default: ''
#  ParentTaskRoleStack:
#    Description: 'Optional stack name of parent task role based on ecs-task-role.yaml template.'
#    Type: String
#    Default: ''
  LoadBalancerHttpPriority:
    Description: 'The priority for the rule. Elastic Load Balancing evaluates rules in priority order, from the lowest value to the highest value. If a request satisfies a rule, Elastic Load Balancing ignores all subsequent rules. A target group can have only one rule with a given priority.'
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be in the range [1-99999]'
    MinValue: 1
    MaxValue: 99999
  LoadBalancerHttpsPriority:
    Description: 'The priority for the rule. Elastic Load Balancing evaluates rules in priority order, from the lowest value to the highest value. If a request satisfies a rule, Elastic Load Balancing ignores all subsequent rules. A target group can have only one rule with a given priority.'
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be in the range [1-99999]'
    MinValue: 1
    MaxValue: 99999
  LoadBalancerHostPattern:
    Description: 'Optional host pattern. Specify LoadBalancerPath and/or LoadBalancerHostPattern.'
    Type: String
    Default: ''
    ConstraintDescription: 'Must not be longer than 255'
    MaxLength: 255
  LoadBalancerPath:
    Description: 'Optional path part of the path pattern. E.g., for service, the path pattern will be /service/*.  Specify LoadBalancerPath and/or LoadBalancerHostPattern.'
    Type: String
    Default: ''
    ConstraintDescription: 'Must not be longer than 255'
    MaxLength: 255
  LoadBalancerHttps:
    Description: 'If the cluster supports HTTPS (LoadBalancerCertificateArn is set) you can enable HTTPS for the service'
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  LoadBalancerDeregistrationDelay:
    Description: 'The amount time (in seconds) to wait before changing the state of a deregistering target from draining to unused.'
    Type: Number
    Default: 300
    ConstraintDescription: 'Must be in the range [0-3600]'
    MinValue: 0
    MaxValue: 3600
  Image:
    Description: 'The image to use for a container, which is passed directly to the Docker daemon. You can use images in the Docker Hub registry or specify other repositories (repository-url/image:tag).'
    Type: String
  DesiredCount:
    Description: 'The number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 2
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  MaxCapacity:
    Description: 'The maximum number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 4
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  MinCapacity:
    Description: 'The minimum number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 2
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  SubDomainNameWithDot:
    Description: 'Name that is used to create the DNS entry with trailing dot, e.g. ยง{SubDomainNameWithDot}ยง{HostedZoneName}. Leave blank for naked (or apex and bare) domain. Requires ParentZoneStack parameter!'
    Type: String
    Default: ''
  ContainerPort:
    Description: 'Container port (default 8080)'
    Type: Number
    Default: 8080
  SSMParametersPrefix:
    Description: 'SSM parameters path prefix. Parameters will be injected into environment.'
    Type: String
    Default: ''
  ContainerMaxCPU:
    Description: 'The maximum number of cpu reservation per container that you plan to run on this cluster. A container instance has 1,024 CPU units for every CPU core.'
    Type: Number
    Default: 256
  ContainerMaxMemory:
    Description: 'The maximum number of memory reservation (in MB)  per container that you plan to run on this cluster.'
    Type: Number
    Default: 256
  LoadBalancerType:
    Description: 'The load balancer that will be used (default to public load balancer)'
    Type: String
    Default: 'public'
    AllowedValues:
    - 'public'
    - 'internal'
  HealthCheckPath:
    Description: 'Target group health check path. E.g., for ping, the path will be [LoadBalancerPath]/ping .'
    Type: String
    Default: 'liveness'
Mappings: {}
Conditions:
  HasLoadBalancerHttps: !Equals [!Ref LoadBalancerHttps, 'true']
  HasLoadBalancerPath: !Not [!Equals [!Ref LoadBalancerPath, '']]
  HasLoadBalancerHostPattern: !Not [!Equals [!Ref LoadBalancerHostPattern, '']]
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
  HasZone: !Not [!Equals [!Ref ParentZoneStack, '']]
#  HasTaskRole: !Not [!Equals [!Ref ParentTaskRoleStack, '']]
  HasLoadBalancerTypePublic: !Equals [!Ref LoadBalancerType, 'public']
  HasLoadBalancerTypeInternal: !Equals [!Ref LoadBalancerType, 'internal']
Resources:
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Ref 'AWS::StackName'
      NetworkMode: bridge
      TaskRoleArn: {'Fn::ImportValue': !Sub '${ParentClusterStack}-ECSTaskRole'}
#        !If
#          - HasTaskRole
#          - {'Fn::ImportValue': !Sub '${ParentTaskRoleStack}-ECSTaskRole'}
#          - !Ref AWS::NoValue
      ContainerDefinitions:
      - Name: main # if you change this, you also must change the AWS::ECS::Service
        Image: !Ref Image
        Memory: !Ref ContainerMaxMemory
        Cpu: !Ref ContainerMaxCPU
        Environment:
          - Name: AWS_SSM_PREFIX
            Value: !Ref SSMParametersPrefix
          - Name: AWS_DEFAULT_REGION
            Value: !Ref 'AWS::Region'
        PortMappings:
        - ContainerPort: !Ref ContainerPort # if you change this, you also must change the AWS::ECS::Service
          Protocol: tcp
        Essential: true
        LogConfiguration:
          LogDriver: awslogs
          Options:
            'awslogs-region': !Ref 'AWS::Region'
            'awslogs-group': {'Fn::ImportValue': !Sub '${ParentClusterStack}-LogGroup'}
            'awslogs-stream-prefix': !Ref 'AWS::StackName'
  RecordSet:
    Condition: HasZone
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        HostedZoneId: {'Fn::ImportValue': !Sub '${ParentClusterStack}-CanonicalHostedZoneID'}
        DNSName: 
          !If
            - HasLoadBalancerTypePublic
            - {'Fn::ImportValue': !Sub '${ParentClusterStack}-PublicDNSName'}
            - {'Fn::ImportValue': !Sub '${ParentClusterStack}-InternalDNSName'}
      HostedZoneId: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'}
      Name: !Sub
      - '${SubDomainNameWithDot}${HostedZoneName}'
      - SubDomainNameWithDot: !Ref SubDomainNameWithDot
        HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      Type: A
  LoadBalancerTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: 
        !If
          - HasLoadBalancerPath
          - !Sub '/${LoadBalancerPath}/${HealthCheckPath}'
          - !Sub '/${HealthCheckPath}'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 80
      Protocol: HTTP
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: !Ref LoadBalancerDeregistrationDelay
  HTTPCodeELB5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer returns 5XX HTTP status codes'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_ELB_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: LoadBalancer
        Value: 
          !If
            - HasLoadBalancerTypePublic
            - {'Fn::ImportValue': !Sub '${ParentClusterStack}-LoadBalancerFullName'}
            - {'Fn::ImportValue': !Sub '${ParentClusterStack}-InternalLoadBalancerFullName'}
      - Name: TargetGroup
        Value: !GetAtt LoadBalancerTargetGroup.TargetGroupFullName
  HTTPCodeTarget5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer receives 5XX HTTP status codes from targets'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_Target_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: LoadBalancer
        Value:
          !If
            - HasLoadBalancerTypePublic
            - {'Fn::ImportValue': !Sub '${ParentClusterStack}-LoadBalancerFullName'}
            - {'Fn::ImportValue': !Sub '${ParentClusterStack}-InternalLoadBalancerFullName'}
      - Name: TargetGroup
        Value: !GetAtt LoadBalancerTargetGroup.TargetGroupFullName
  RejectedConnectionCountTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer rejected connections because the load balancer had reached its maximum number of connections'
      Namespace: 'AWS/ApplicationELB'
      MetricName: RejectedConnectionCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: LoadBalancer
        Value:
          !If
            - HasLoadBalancerTypePublic
            - {'Fn::ImportValue': !Sub '${ParentClusterStack}-LoadBalancerFullName'}
            - {'Fn::ImportValue': !Sub '${ParentClusterStack}-InternalLoadBalancerFullName'}
      - Name: TargetGroup
        Value: !GetAtt LoadBalancerTargetGroup.TargetGroupFullName
  TargetConnectionErrorCountTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer could not connect to targets'
      Namespace: 'AWS/ApplicationELB'
      MetricName: TargetConnectionErrorCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: LoadBalancer
        Value: 
          !If
            - HasLoadBalancerTypePublic
            - {'Fn::ImportValue': !Sub '${ParentClusterStack}-LoadBalancerFullName'}
            - {'Fn::ImportValue': !Sub '${ParentClusterStack}-InternalLoadBalancerFullName'}
      - Name: TargetGroup
        Value: !GetAtt LoadBalancerTargetGroup.TargetGroupFullName
#  LoadBalancerHttpListenerRule:
#    Condition: HasLoadBalancerTypeInternal
#    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
#    Properties:
#      Actions:
#      - Type: forward
#        TargetGroupArn: !Ref LoadBalancerTargetGroup
#      Conditions: !If
#      - HasLoadBalancerPath
#      - !If
#        - HasLoadBalancerHostPattern
#        - - Field: host-header
#            Values:
#            - !Ref LoadBalancerHostPattern
#          - Field: path-pattern
#            Values:
#            - !Sub '/${LoadBalancerPath}*'
#        - - Field: path-pattern
#            Values:
#            - !Sub '/${LoadBalancerPath}*'
#      - !If
#        - HasLoadBalancerHostPattern
#        - - Field: host-header
#            Values:
#            - !Ref LoadBalancerHostPattern
#        - - Field: path-pattern
#            Values:
#            - '/*' # neither LoadBalancerHostPattern nor LoadBalancerPath specified
#      ListenerArn:
#        !If
#          - HasLoadBalancerTypePublic
#          - {'Fn::ImportValue': !Sub '${ParentClusterStack}-HttpListener'}
#          - {'Fn::ImportValue': !Sub '${ParentClusterStack}-InternalHttpListener'}
#      Priority: !Ref LoadBalancerHttpPriority
  LoadBalancerHttpsListenerRule:
    Condition: HasLoadBalancerHttps
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref LoadBalancerTargetGroup
      Conditions: !If
      - HasLoadBalancerPath
      - !If
        - HasLoadBalancerHostPattern
        - - Field: host-header
            Values:
            - !Ref LoadBalancerHostPattern
          - Field: path-pattern
            Values:
            - !Sub '/${LoadBalancerPath}*'
        - - Field: path-pattern
            Values:
            - !Sub '/${LoadBalancerPath}*'
      - !If
        - HasLoadBalancerHostPattern
        - - Field: host-header
            Values:
            - !Ref LoadBalancerHostPattern
        - - Field: path-pattern
            Values:
            - '/*' # neither LoadBalancerHostPattern nor LoadBalancerPath specified
      ListenerArn: 
        !If
          - HasLoadBalancerTypePublic
          - {'Fn::ImportValue': !Sub '${ParentClusterStack}-HttpsListener'}
          - {'Fn::ImportValue': !Sub '${ParentClusterStack}-InternalHttpsListener'}
      Priority: !Ref LoadBalancerHttpsPriority
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ecs.amazonaws.com'
          Action: 'sts:AssumeRole'
  Service:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: {'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'}
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref DesiredCount
      LoadBalancers:
      - ContainerName: main
        ContainerPort: !Ref ContainerPort
        TargetGroupArn: !Ref LoadBalancerTargetGroup
      PlacementStrategies:
      - Type: spread
        Field: 'attribute:ecs.availability-zone'
      - Type: spread
        Field: instanceId
      Role: !GetAtt 'ServiceRole.Arn'
      TaskDefinition: !Ref TaskDefinition
  ScalableTargetRole: # based on http://docs.aws.amazon.com/AmazonECS/latest/developerguide/autoscale_IAM_role.html
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'application-autoscaling.amazonaws.com'
          Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: ecs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ecs:DescribeServices'
            - 'ecs:UpdateService'
            Resource: '*'
      - PolicyName: cloudwatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'cloudwatch:DescribeAlarms'
            Resource: '*'
  ScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref MinCapacity
      ResourceId: !Sub
      - 'service/${Cluster}/${Service}'
      - Cluster: {'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'}
        Service: !GetAtt 'Service.Name'
      RoleARN: !GetAtt 'ScalableTargetRole.Arn'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
  ScaleUpPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-up'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 25
  ScaleDownPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-down'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -25
  CPUUtilizationTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value: {'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'}
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
  CPUUtilizationHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Service is running out of CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value: {'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'}
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 60
      AlarmActions:
      - !Ref ScaleUpPolicy
  CPUUtilizationLowAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Service is wasting CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value: {'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'}
      - Name: ServiceName
        Value: !GetAtt 'Service.Name'
      MetricName: CPUUtilization
      ComparisonOperator: LessThanThreshold
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 30
      AlarmActions:
      - !Ref ScaleDownPolicy
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'ecs/service-cluster-alb'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  DNSName:
    Description: 'The DNS name for the ECS cluster/service load balancer.'
    Value: 
      !If
        - HasLoadBalancerTypePublic
        - {'Fn::ImportValue': !Sub '${ParentClusterStack}-DNSName'}
        - {'Fn::ImportValue': !Sub '${ParentClusterStack}-InternalDNSName'}
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  URL:
    Description: 'URL to the ECS service.' # TODO does not work with LoadBalancerHostPattern
    Value: !Sub
    - '${ClusterURL}/${LoadBalancerPath}'
    - ClusterURL: 
        !If
          - HasLoadBalancerTypePublic
          - {'Fn::ImportValue': !Sub '${ParentClusterStack}-URL'}
          - {'Fn::ImportValue': !Sub '${ParentClusterStack}-InternalURL'}
      LoadBalancerPath: !Ref LoadBalancerPath
    Export:
      Name: !Sub '${AWS::StackName}-URL'
  TargetGroup:
    Description: 'EC2 target group'
    Value: !GetAtt LoadBalancerTargetGroup.TargetGroupFullName